# -*- coding: utf-8 -*-
"""VVER.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k_sG5OMdUh96n_1pyTp8Y8n4ng4MhU-K
"""

#Add google drive
from google.colab import drive
drive.mount('/gdrive')

# Commented out IPython magic to ensure Python compatibility.
#Add link to shared cross section library
#shared library was added as a shortcut to My Drive from the web interface
# %env OPENMC_CROSS_SECTIONS = /gdrive/My Drive/data/endfb71_hdf5/cross_sections.xml

#Download miniconda and install
! wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh
! chmod +x Miniconda3-py37_4.8.2-Linux-x86_64.sh
! bash ./Miniconda3-py37_4.8.2-Linux-x86_64.sh -b -f -p /usr/local
import sys
sys.path.append('/usr/local/lib/python3.7/site-packages/')

# Install OpenMC
!conda config --add channels conda-forge
!conda install openmc -y

import openmc

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

#I will building a mini vver pin-cell.

#@title
#Hexagonal lattice

fuel = openmc.Material(name='fuel')
fuel.add_nuclide('U235', 1.0)
fuel.set_density('g/cm3', 10.0)

fuel2 = openmc.Material(name='fuel2')
fuel2.add_nuclide('U238', 1.0)
fuel2.set_density('g/cm3', 10.0)

water = openmc.Material(name='water')
water.add_nuclide('H1', 2.0)
water.add_nuclide('O16', 1.0)
water.set_density('g/cm3', 1.0)

mats = openmc.Materials((fuel, fuel2, water))
mats.export_to_xml()

#geometry of pin cell
r_pin = openmc.ZCylinder(r=0.25)
fuel_cell = openmc.Cell(fill=fuel, region=-r_pin)
water_cell = openmc.Cell(fill=water, region=+r_pin)
pin_universe = openmc.Universe(cells=(fuel_cell, water_cell))

r_big_pin = openmc.ZCylinder(r=0.5)
fuel2_cell = openmc.Cell(fill=fuel2, region=-r_big_pin)
water2_cell = openmc.Cell(fill=water, region=+r_big_pin)
big_pin_universe = openmc.Universe(cells=(fuel2_cell, water2_cell))

all_water_cell = openmc.Cell(fill=water)
outer_universe = openmc.Universe(cells=(all_water_cell,))

lat = openmc.HexLattice()

lat.center = (0., 0.)
lat.pitch = (1.275,)
lat.outer = outer_universe

outer_ring = [big_pin_universe] + [pin_universe]*11
middle_ring = [big_pin_universe] + [pin_universe]*5
inner_ring = [big_pin_universe]
lat.universes = [outer_ring, middle_ring, inner_ring]

outer_surface = openmc.ZCylinder(r=4.0, boundary_type='vacuum')
main_cell = openmc.Cell(fill=lat, region=-outer_surface)
geom = openmc.Geometry([main_cell])
geom.export_to_xml()

p = openmc.Plot.from_geometry(geom)
p.color_by = 'material'
p.colors = colors = {
    water: 'blue',
    fuel: 'olive',
    fuel2: 'yellow'
}

!apt install imagemagick
p.to_ipython_image()

# Change the orientation of the lattice and re-export the geometry
lat.orientation = 'x'
geom.export_to_xml()

# Run OpenMC in plotting mode

!apt install imagemagick
p.to_ipython_image()

main_cell.region = openmc.model.hexagonal_prism(
    edge_length=3*lat.pitch[0],
    orientation='x',
    boundary_type='vacuum'
)
geom = openmc.Geometry([main_cell])
geom.export_to_xml()


# Run OpenMC in plotting mode
p.color_by = 'cell'
!apt install imagemagick
p.to_ipython_image()

"""This week tasks

Use the openmc.model.pin function (https://docs.openmc.org/en/latest/pythonapi/generated/openmc.model.pin.html?highlight=openmc.model#openmc-model-pin)
Use the openmc.model.hex_prism or rect_prism functions when applicable
Use the borated water function (even if you need to set boron to 0ppm, this function will automatically lookup water properties for the temperature you give it)
Clean you your models of pins and assemblies (or small cores), and identify places to simplify the input
 
And here is a list of simpler functions that we can start working  on:
 
Add Gd2O3 calculations to the uranium enrichment function (we can also add Erbium, Dysprosium , …)
Add models for IFBA, WABA, …
Add pre-defined structural materials
Create/use the lattice acceleration method for non-TRISO geometries (TRIGA and RBMK)
Use CMFD for non Cartesian geometries
Function to create circular lattices like RBMK, CANDU
Function to create a BWR box with thin/thick geometry
Function to position control rod height
Function to create tallies for breeding ratio, fissile inventory ratio
Functions for thermodynamic properties of other coolants (Sodium, He, Heavy water, …)

VVER sheet
"""

# defining materials for 4 types of pincells. 
#fuells
au13=openmc.Material(name='13au',material_id=1)
au13.add_element('U',1.0,enrichment=1.3)
au13.add_element('O',2.0)
au13.set_density('g/cc', 10.4)

au22=openmc.Material(name='13au',material_id=2)
au22.add_element('U',1.0,enrichment=2.2)
au22.add_element('O',2.0)
au22.set_density('g/cc', 10.4)

av5=openmc.Material(name='30av5u',material_id=3)
av5.add_element('U',1.0,enrichment=3.0)
av5.add_element('O',2.0)
av5.set_density('g/cc', 10.4)

awu=openmc.Material(name='39awu',material_id=4)
awu.add_element('U',1.0,enrichment=3.3)
awu.add_element('O',2.0)
awu.set_density('g/cc', 10.4)

go=openmc.Material(name='390go',material_id=5)
go.add_element('U',1.0,enrichment=4.0)
go.add_element('O',2.0)
go.set_density('g/cc', 10.4)

Gd2O3=openmc.Material(name='Gd2O3',material_id=6)
Gd2O3.add_element('Gd',2.0)#>>>? Gd153
Gd2O3.add_element('O',3.0)
Gd2O3.set_density('g/cm3',7.41)
#moderator
water = openmc.Material(name='water',material_id=7)
water.add_nuclide('H1', 2.0)
water.add_nuclide('O16', 1.0)
water.set_density('g/cm3', 1.0)
water.add_s_alpha_beta('c_H_in_H2O')
#clad
zirconium = openmc.Material(name="zirconium",material_id=8)
zirconium.add_element('Zr', 1.0)
zirconium.set_density('g/cm3', 6.6)

niobium=openmc.Material(name='niobium',material_id=9)
niobium.add_element('Nb',1.0)
niobium.set_density('g/cm3',8.57)
#gap
helium=openmc.Material(name='Helium',material_id=10)
helium.add_element('He',2.0)
helium.set_density('g/cm3',0.178*10**(-3))
# for thermal data
vapor_mat = openmc.Material(material_id=11)
vapor_mat.add_nuclide('Na23',1.0)
vapor_mat.set_density('g/cm3',0.10)

#reflector
reflector_mat = openmc.Material(material_id=12)
reflector_mat.add_nuclide('Be9',1.0)
reflector_mat.add_nuclide('O16',1.0)
reflector_mat.set_density('g/cm3',2.9)

#preparing mixtures
alloy=openmc.Material.mix_materials([niobium, zirconium],[0.01, 0.99],'wo')
fuel_awu = openmc.Material.mix_materials([Gd2O3, awu], [0.05, 0.95], 'wo')
fuel_go = openmc.Material.mix_materials([Gd2O3, go], [0.05, 0.95], 'wo')

# Instantiate a Materials collection
materials_file = openmc.Materials([au13, au22, av5, fuel_awu, fuel_go, water, alloy, vapor_mat, reflector_mat])

# Export to "materials.xml"
materials_file.export_to_xml()

# Designing General Geometry

# boudries and outer universe
#outer_water=openmc.Cell(fill=water)
all_water_out=openmc.Cell(cell_id=200,fill=water)

# top & bottom of the assembly 
assembly_z0 = openmc.ZPlane(z0=-75)
assembly_z1 = openmc.ZPlane( z0=75)
assembly = openmc.model.hexagonal_prism(edge_length=18, orientation='y')
# top & bottom of the reflector
reflector_z0 = openmc.ZPlane(z0=-95, boundary_type='vacuum')
reflector_z1 = openmc.ZPlane(z0=95, boundary_type='vacuum')

# reflector hexagon
reflector = openmc.model.hexagonal_prism(edge_length=18, orientation='y',
    boundary_type='vacuum')
# others
fuel_or = openmc.ZCylinder(r=0.3765)
clad_ir = openmc.ZCylinder(r=0.4)# ~0.02 cm gap >> supposedly helium
clad_or = openmc.ZCylinder(r=0.465)
mod_hexagonal= openmc.model.hexagonal_prism(edge_length=0.55, orientation='y',boundary_type='vacuum')#>>>?
#mod=openmc.ZCylinder(r=0.55)
fuel_region = -fuel_or & -assembly_z1 & +assembly_z0
gap_region = +fuel_or & -clad_ir & -assembly_z1 & +assembly_z0
clad_region = +clad_ir & -clad_or & -assembly_z1 & +assembly_z0
moderator_region= mod_hexagonal & +clad_or & -assembly_z1 & +assembly_z0

gap_cell=openmc.Cell(fill=helium, region=gap_region)
cladcell=openmc.Cell(fill=alloy, region=clad_region)
water_cell=openmc.Cell(fill=water, region=moderator_region)


assembly_cell = openmc.Cell()
reflect_cell = openmc.Cell()
top_reflect_cell = openmc.Cell()
bot_reflect_cell = openmc.Cell()

#regions

assembly_cell.region = assembly & -assembly_z1 & +assembly_z0

reflect_cell.region = ~assembly & reflector \
& -assembly_z1 & +assembly_z0

top_reflect_cell.region = reflector & +assembly_z1 & -reflector_z1 \

bot_reflect_cell.region = reflector & -assembly_z0 & +reflector_z0 \
#pie fillings

reflect_cell.fill = reflector_mat
top_reflect_cell.fill = reflector_mat
bot_reflect_cell.fill = reflector_mat

#turn cell to universe to make it easier
all_water_out_u=openmc.Universe(cells=[all_water_out])
u_reflect = openmc.Universe(cells=(reflect_cell,top_reflect_cell,bot_reflect_cell))
u_root = openmc.Universe()

# centeral tube >> water
centeral_tube= openmc.Cell(fill=water,region=fuel_region)
centeral_tube_u=openmc.Universe(cells=[centeral_tube,gap_cell,cladcell])
geom=openmc.Geometry(centeral_tube_u)
geom.export_to_xml()
centeral_tube_u.plot(width=(3,3))

# geometry of 13 au
au13_fuel_cell=openmc.Cell(fill=au13, region=fuel_region)
au13_u=openmc.Universe(cells=(au13_fuel_cell, gap_cell, cladcell, water_cell))

geom=openmc.Geometry(au13_u)
geom.export_to_xml()


au13_u.plot(width=(3,3))

#geometry of 22 au
au22_fuel_cell=openmc.Cell(fill=au22, region=fuel_region)
au22_u=openmc.Universe(cells=(au22_fuel_cell, gap_cell, cladcell, water_cell))

geom=openmc.Geometry(au22_u)
geom.export_to_xml()

#geometry av5
av5_fuel_cell=openmc.Cell(fill=av5, region=fuel_region)
av5_u=openmc.Universe(cells=(av5_fuel_cell, gap_cell, cladcell, water_cell))

geom=openmc.Geometry(av5_u)
geom.export_to_xml()

#geometry of awu
awu_fuel_cell=openmc.Cell(fill=fuel_awu, region=fuel_region)
awu_u=openmc.Universe(cells=(awu_fuel_cell, gap_cell, cladcell, water_cell))

geom=openmc.Geometry(awu_u)
geom.export_to_xml()

#geometry of go
go_fuel_cell=openmc.Cell(fill=fuel_go, region=fuel_region)
go_u=openmc.Universe(cells=(go_fuel_cell, gap_cell, cladcell, water_cell))

geom=openmc.Geometry(go_u)
geom.export_to_xml()

"""Reactor core:/"""

# we have 163 pincell, .... 
"""
 Number of assemblies
13au 48
22au 42 
30av5 37 
39awu 24 
390go 12
"""
lat=openmc.HexLattice(name='assembly')
lat.center = (0., 0.)
lat.pitch = (1.275,)###
lat.outer=all_water_out_u

#lat.outer = u_monolith
#lat.orientation='x'
print(lat.show_indices(7,orientation='x')) # with 7 cycles we would have 169 pincell, but we know that 6 pincell are removed according to graphs.

#ring8=[centeral_tube_u]*48
#ring7=[awu_u, awu_u, go_u, centeral_tube_u, go_u, awu_u, awu_u]*6
ring7=[awu_u, awu_u, go_u,awu_u, go_u, awu_u, awu_u]*6

#ring7=[au22_u, au13_u, au22_u, av5_u, av5_u,au13_u, av5_u]*6
ring6= [au22_u, av5_u, au22_u,
        av5_u, au22_u, av5_u,
        au13_u,av5_u, au22_u,
        av5_u,au22_u,av5_u,
        au22_u,av5_u,au22_u,
        av5_u,au22_u,av5_u,
        au22_u,av5_u,au22_u,
        av5_u,au22_u,av5_u,
        au13_u,av5_u,au22_u,
        av5_u,au22_u,av5_u,
        au13_u,av5_u,au22_u,
        av5_u,au22_u,av5_u]
ring5= [au13_u, au13_u, au22_u, au13_u, au13_u]*6
ring4=[au22_u, av5_u, au13_u, av5_u]*6
ring3=[au13_u, au22_u, au13_u]*6
ring2=[au22_u, av5_u]*6
ring1=[au13_u]*6
ring0=[centeral_tube_u]
lat.universes = [ring7, ring6, ring5, ring4, ring3, ring2, ring1, ring0]
lat.oreintation='x'

#outer_surface=openmc.model.hexagonal_prism(edge_length=18, orientation='y')
#main_assembly = openmc.Cell(fill=lat, region=outer_surface)
#main_u=openmc.Universe(cells=[main_assembly])

assembly_cell.fill = lat

u_root.add_cells([assembly_cell, reflect_cell, top_reflect_cell, bot_reflect_cell])
geom=openmc.Geometry(u_root)
geom.export_to_xml()

u_root.plot(origin=(0,0,0),width=(25,25),colors={water:'blue'},pixels=[400,400])
#u_root.plot(origin=(0,0,0),width=(25,25),color_by='material',pixels=[400,400])

u_root.plot(basis='yz',origin=(0,0,0),width=(50,50),color_by='material',pixels=[200,200])

#######################
# Run Settings
######################

uniform_dist = openmc.stats.Box([-24,-24,-75],[24,24,75],only_fissionable=True)

settings = openmc.Settings()
settings.seed = 1
settings.batches = 200
settings.inactive = 100
settings.particles = 100
settings.source = openmc.source.Source(space=uniform_dist)
settings.export_to_xml()

openmc.run()

# for control rodes 
#materials for rodes
def insert_rode(pitch,rode_type)













